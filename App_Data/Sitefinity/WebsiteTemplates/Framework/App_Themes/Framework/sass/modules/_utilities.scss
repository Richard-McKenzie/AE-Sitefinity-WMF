//Utility functions

$font-em-base: 14 !default;

$breakpoint-s: 0em !default;
$breakpoint-m: 48em !default;   //  768px
$breakpoint-l: 60em !default;   //  960px 
$breakpoint-xl: 72em !default;  // 1152px
$breakpoint-xxl: 84em !default; // 1344px

// Use this if you want, x-rem function is better.
@function em($target, $font-em-base: 14) {
	@return ($target / $font-em-base) * 1em;
}

// a small mixin for easy use of rem with px as fallback
// usage: @include x-rem(font-size, 14px)
// usage: @include x-rem(margin, 0 12px 2 1.2)
// usage: @include x-rem(padding, 1.5 24px)
// 
// thanks to Eric Meyer for https://github.com/ericam/susy
// and Hans Christian Reinl for http://drublic.de/blog/rem-fallback-sass-less/

@mixin x-rem($property, $values) {
  // Create a couple of empty lists as output buffers.
  $base-font-size: 16px; // should be consistent with your html/body font-size
  $px-values: ();
  $rem-values: ();
 
  // Loop through the $values list
  @each $value in $values {
    // For each property value, if it's in rem or px, derive both rem and
    // px values for it and add those to the end of the appropriate buffer.
    // Ensure all pixel values are rounded to the nearest pixel.
    @if $value == 0 or $value == 0px {
      // 0 -- use it without a unit
      $px-values: join($px-values, 0);
      $rem-values: join($rem-values, 0);
    } @else if type-of($value) == number and not unitless($value) and (unit($value) == px) {
      // px value given - calculate rem value from base-font-size
      $new-rem-value: $value / $base-font-size;
      $px-values: join($px-values, round($value));
      $rem-values: join($rem-values, #{$new-rem-value}rem);
    } @else if type-of($value) == number and not unitless($value) and (unit($value) == "%") {
      // % value given - don't add px or rem
      $px-values: join($px-values, #{$value});
      $rem-values: join($rem-values, #{$value});
    } @else if $value == auto {
      // auto - don't add px or rem
      $px-values: join($px-values, auto);
      $rem-values: join($rem-values, auto);      
    } @else {
      // unitless value - use those directly as rem and calculate the px-fallback
      $px-values: join($px-values, round($value * $base-font-size));
      $rem-values: join($rem-values, #{$value}rem);
    }
  }
 
  // output the converted rules
  #{$property}: $px-values;
  #{$property}: $rem-values;
}

@mixin clearfix {
	&:after {
		content: "";
		display: table;
		clear: both;
	}
}

// TODO: Change to EM breakpoints
@mixin breakpoint($point) {
	@if $point == retina {
		@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) { @content; }
	}
	// 16px baseline (256px) s = small
	@else if $point == s {
		@media (min-width: $breakpoint-s) { @content; }
	}	// 16px baseline (256px - 767px) s-m = small TO medium
	@else if $point == s-m {
		@media (min-width:$breakpoint-s) and (max-width:$breakpoint-m - 0.1em)  { @content; }
	}
	// 16px baseline (256px - 959px) s-l = small TO large
	@else if $point == s-l {
		@media (min-width:$breakpoint-s) and (max-width:$breakpoint-l - 0.1em)  { @content; }
	}
	@else if $point == s-xl {
		@media (min-width:$breakpoint-s) and (max-width:$breakpoint-xl - 0.1em)  { @content; }
	}
	// 16px baseline (768px) m = medium
	@else if $point == m {
		@media (min-width: $breakpoint-m) { @content; }
	}
	// 16px baseline (768px - 959px) m-l = medium TO large
	@else if $point == m-l {
		@media (min-width:$breakpoint-m) and (max-width:$breakpoint-l - 0.1em)  { @content; }
	}
	// 16px baseline (768px - 1152) m-l = medium TO xlarge
	@else if $point == m-xl {
		@media (min-width:$breakpoint-m) and (max-width:$breakpoint-xl - 0.1em)  { @content; }
	}
	// 16px baseline (960px) l = large
	@else if $point == l {
		@media (min-width: $breakpoint-l) { @content; }
	}
	// 16px baseline (1152px) lx = extra large
	@else if $point == xl {
		@media (min-width: $breakpoint-xl) { @content; }
	}
	@else if $point == xxl {
		@media (min-width: $breakpoint-xxl) { @content; }
	}
}
